"""add shipper table

Revision ID: 4774a0c47703
Revises: 03211e2803bf
Create Date: 2024-08-17 00:32:57.394575

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import ENUM
# revision identifiers, used by Alembic.
revision: str = '4774a0c47703'
down_revision: Union[str, None] = '03211e2803bf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    gender_enum = ENUM('Male', 'Female', 'Prefer not to respond', name='gender_shipper', create_type=False)
    op.execute("DROP TYPE IF EXISTS gender_shipper CASCADE")
    gender_enum.create(op.get_bind())
    
    table_name = 'shipper'
    check_table_query = sa.text(
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = :table_name)"
    )
    table_exists = op.get_bind().execute(check_table_query, {"table_name": table_name}).scalar()

    # Create the table if it does not exist
    if not table_exists:
        op.create_table(
            'shipper',
            sa.Column('shipper_id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('order_id', sa.Integer(), nullable=False),
            sa.Column('name', sa.String(), nullable=True),
            sa.Column('gender', gender_enum, nullable=True),  # Ensure the ENUM is created beforehand if not existing
            sa.Column('age', sa.Integer(), nullable=True),
            sa.Column('phone', sa.String(), nullable=False),
            sa.Column('address', sa.String(), nullable=False),
            sa.ForeignKeyConstraint(['order_id'], ['order.order_id']),
            sa.ForeignKeyConstraint(['shipper_id'], ['profile.user_id']),
            sa.PrimaryKeyConstraint('shipper_id', 'order_id')
        )

    # Check if the index exists
    index_name = op.f('ix_shipper_shipper_id')
    check_index_query = sa.text(
        "SELECT to_regclass(:index_name) IS NOT NULL"
    )
    index_exists = op.get_bind().execute(check_index_query, {"index_name": index_name}).scalar()

    # Create the index if it does not exist
    if not index_exists:
        op.create_index(
            index_name,
            'shipper',
            ['shipper_id'],
            unique=False
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    index_name = op.f('ix_shipper_shipper_id')
    check_index_query = sa.text(
        "SELECT to_regclass(:index_name) IS NOT NULL"
    )
    index_exists = op.get_bind().execute(check_index_query, {"index_name": index_name}).scalar()

    if index_exists:
        op.drop_index(index_name, table_name='shipper')

    # Safely drop the table if it exists
    table_name = 'shipper'
    check_table_query = sa.text(
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = :table_name)"
    )
    table_exists = op.get_bind().execute(check_table_query, {"table_name": table_name}).scalar()

    if table_exists:
        op.drop_table(table_name)
    op.execute("DROP TYPE IF EXISTS gender_shipper CASCADE")
    # ### end Alembic commands ###
