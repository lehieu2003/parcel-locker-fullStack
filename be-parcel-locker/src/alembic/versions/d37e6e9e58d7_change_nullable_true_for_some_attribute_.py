"""Change nullable = true for some attribute for adding information later

Revision ID: d37e6e9e58d7
Revises: 4f1ef490dafd
Create Date: 2024-07-31 19:55:48.391947

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd37e6e9e58d7'
down_revision: Union[str, None] = '4f1ef490dafd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def alter_column_if_table_exists(table_name, column_name, **kwargs):
    """
    Alters a column if the table exists.

    :param table_name: Name of the table to check.
    :param column_name: Name of the column to alter.
    :param kwargs: Additional keyword arguments to pass to op.alter_column().
    """
    # Check if the table exists
    conn = op.get_bind()
    table_exists = conn.dialect.has_table(conn, table_name)

    if not table_exists:
        return

    # Alter the column if the table exists
    op.alter_column(table_name, column_name, **kwargs)
    print(f"Altered column '{column_name}' in table '{table_name}'.")
    
    
def upgrade() -> None:
    
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Example usage
    alter_column_if_table_exists('user', 'name', existing_type=sa.VARCHAR(), nullable=True)
    alter_column_if_table_exists('user', 'address', existing_type=sa.VARCHAR(), nullable=True)
    alter_column_if_table_exists('user', 'phone', existing_type=sa.VARCHAR(), nullable=True)
    alter_column_if_table_exists('user', 'password', existing_type=sa.VARCHAR(), nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
   
