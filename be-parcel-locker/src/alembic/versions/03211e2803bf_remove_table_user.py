"""remove table user

Revision ID: 03211e2803bf
Revises: c10db8f9feb8
Create Date: 2024-08-13 01:06:32.940706

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '03211e2803bf'
down_revision: Union[str, None] = 'c10db8f9feb8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    index_name = 'ix_user_user_id'
    check_index_query = sa.text(
        "SELECT to_regclass(:index_name) IS NOT NULL"
    )
    index_exists = op.get_bind().execute(check_index_query, {"index_name": index_name}).scalar()
    # Drop the index if it exists
    if index_exists:
        op.drop_index(index_name, table_name='user')

    # Check if the table exists
    table_name = 'user'
    check_table_query = sa.text(
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = :table_name)"
    )
    table_exists = op.get_bind().execute(check_table_query, {"table_name": table_name}).scalar()
    # Drop the table if it exists
    if table_exists:
        op.drop_table(table_name)
    # ### end Alembic commands ###


def downgrade() -> None:
    # Check if the table exists
    table_name = 'user'
    check_table_query = sa.text(
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = :table_name)"
    )
    table_exists = op.get_bind().execute(check_table_query, {"table_name": table_name}).scalar()

    # Create the table if it does not exist
    if not table_exists:
        op.create_table(
            'user',
            sa.Column('user_id', sa.INTEGER(), autoincrement=True, nullable=False),
            sa.Column('email', sa.VARCHAR(), nullable=False),
            sa.Column('name', sa.VARCHAR(), nullable=True),
            sa.Column('username', sa.VARCHAR(length=20), nullable=False),
            sa.Column('address', sa.VARCHAR(), nullable=True),
            sa.Column('phone', sa.VARCHAR(), nullable=True),
            sa.Column('password', sa.VARCHAR(), nullable=False),
            sa.Column('Date_created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
            sa.Column('role', sa.INTEGER(), server_default=sa.text('2'), nullable=False),
            sa.PrimaryKeyConstraint('user_id', 'email', name='user_pkey')
        )

    # Check if the index exists
    index_name = 'ix_user_user_id'
    check_index_query = sa.text(
        "SELECT to_regclass(:index_name) IS NOT NULL"
    )
    index_exists = op.get_bind().execute(check_index_query, {"index_name": index_name}).scalar()

    # Create the index if it does not exist
    if not index_exists:
        op.create_index(
            'ix_user_user_id',
            'user',
            ['user_id'],
            unique=False
        )
    # ### end Alembic commands ###
