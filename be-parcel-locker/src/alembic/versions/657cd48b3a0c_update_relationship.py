"""update relationship

Revision ID: 657cd48b3a0c
Revises: 4774a0c47703
Create Date: 2024-08-17 13:52:19.909694

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '657cd48b3a0c'
down_revision: Union[str, None] = '4774a0c47703'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
    """
    INSERT INTO role (role_id, name)
    SELECT 1, 'admin' WHERE NOT EXISTS (SELECT 1 FROM role WHERE role_id = 1);
    
    
    INSERT INTO role (role_id, name)
    SELECT 2, 'user' WHERE NOT EXISTS (SELECT 1 FROM role WHERE role_id = 2);
  
    
    INSERT INTO role (role_id, name)
    SELECT 3, 'shipper' WHERE NOT EXISTS (SELECT 1 FROM role WHERE role_id = 3);
    
    """)
    
    # Check and create constraints if they don't exist
    op.execute(
        """
        DO $$ 
        BEGIN
            IF NOT EXISTS (
                SELECT 1 
                FROM pg_constraint 
                WHERE conname = 'account_username_unique'
            ) THEN
                ALTER TABLE account 
                ADD CONSTRAINT account_username_unique UNIQUE (username);
            END IF;
        END $$;
        """
    )

    op.execute(
        """
        DO $$ 
        BEGIN
            IF NOT EXISTS (
                SELECT 1 
                FROM pg_constraint 
                WHERE conname = 'account_email_unique'
            ) THEN
                ALTER TABLE account 
                ADD CONSTRAINT account_email_unique UNIQUE (email);
            END IF;
        END $$;
        """
    )

    op.execute(
        """
        DO $$ 
        BEGIN
            IF NOT EXISTS (
                SELECT 1 
                FROM pg_constraint 
                WHERE conname = 'role_foreign_key'
            ) THEN
                ALTER TABLE account 
                ADD CONSTRAINT role_foreign_key 
                FOREIGN KEY (role) REFERENCES role(role_id);
            END IF;
        END $$;
        """
    )

    op.execute(
        """
        DO $$ 
        BEGIN
            IF NOT EXISTS (
                SELECT 1 
                FROM pg_constraint 
                WHERE conname = 'order_sender_fkey'
            ) THEN
                ALTER TABLE "order" 
                ADD CONSTRAINT order_sender_fkey 
                FOREIGN KEY (sender_id) REFERENCES profile(user_id);
            END IF;
        END $$;
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
        # Check and drop constraints only if they exist
    op.drop_constraint('account_username_unique', 'account', type_='unique')
    op.drop_constraint('account_email_unique', 'account', type_='unique')
    op.drop_constraint('role_foreign_key', 'account', type_='foreignkey')
    op.drop_constraint('order_sender_fkey', 'order', type_='foreignkey')
    op.execute(
        """
        DELETE FROM role WHERE role_id IN (1, 2, 3);
        """
    )
    

    # ### end Alembic commands ###
